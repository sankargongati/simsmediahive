import { _supabase } from './supabaseClient.js';
import * as dom from './dom.js';
import * as config from './config.js';

async function handleMemberDelete(memberId, imagePath) {
    if (!confirm(`Are you sure you want to delete this member (ID: ${memberId}) permanently?`)) return; dom.membersStatus.textContent = `Deleting member ${memberId}...`; dom.membersStatus.style.color = 'white'; const deleteButtonInList = dom.memberList.querySelector(`.delete-member-btn[data-id="${memberId}"]`); if(deleteButtonInList) deleteButtonInList.disabled = true;
    try { if (imagePath && !imagePath.startsWith('missing_path_')) { console.log("Attempting to delete member image:", imagePath); const { error: storageError } = await _supabase.storage.from(config.MEMBERS_BUCKET).remove([imagePath]); if (storageError && storageError.message !== 'The resource was not found') console.warn("Could not delete member image:", storageError.message); else if (!storageError) console.log("Member image deleted successfully."); } else { console.log("No valid image path found, skipping storage delete."); } const { error: dbError } = await _supabase.from('members').delete().eq('id', memberId); if (dbError) throw dbError; dom.membersStatus.textContent = 'Member deleted successfully!'; dom.membersStatus.style.color = '#22c55e'; await loadMembers(); if(dom.memberIdInput.value === memberId.toString()) clearMembersForm(); }
    catch (error) { console.error('Member delete failed:', error); dom.membersStatus.textContent = `Deletion failed: ${error.message}`; dom.membersStatus.style.color = 'red'; if(deleteButtonInList) deleteButtonInList.disabled = false; }
    finally { setTimeout(() => { if(dom.membersStatus) dom.membersStatus.textContent = ''; }, 4000); }
}

async function populateMembersFormForEdit(memberId) {
    dom.membersStatus.textContent = "Loading member data for editing..."; dom.membersStatus.style.color = 'white'; clearMembersForm();
    try { const { data: member, error } = await _supabase.from('members').select('*').eq('id', memberId).single(); if (error || !member) throw error || new Error("Member not found"); dom.memberIdInput.value = member.id; dom.memberNameInput.value = member.name || ''; dom.memberRoleInput.value = member.role || ''; dom.memberDescriptionInput.value = member.description || ''; dom.memberImageInput.value = ''; dom.membersStatus.textContent = "Editing member. Upload a new photo only if you want to replace the current one."; dom.membersStatus.style.color = 'white'; window.scrollTo({ top: dom.membersForm.offsetTop - 100, behavior: 'smooth' }); }
    catch (error) { console.error("Failed to load member for editing:", error); dom.membersStatus.textContent = "Could not load member data for editing."; dom.membersStatus.style.color = 'red'; }
}

function clearMembersForm() { dom.membersForm.reset(); dom.memberIdInput.value = ''; dom.membersStatus.textContent = ''; dom.memberImageInput.value = ''; console.log("Members form cleared."); }

export async function loadMembers() {
    dom.memberList.innerHTML = '<p class="text-gray-400 col-span-full text-center">Loading members...</p>';
    try { const { data, error } = await _supabase.from('members').select('id, name, role, description, imageUrl, imagePath').order('created_at', { ascending: true }); if (error) throw error; dom.memberList.innerHTML = ''; if (!data || data.length === 0) { dom.memberList.innerHTML = '<p class="text-gray-400 col-span-full text-center">No members added yet.</p>'; } else { data.forEach(member => { const memberCard = document.createElement('div'); memberCard.className = 'member-card flex flex-col items-center text-center bg-gray-900 p-4 rounded-lg shadow-xl border border-gray-800 relative group'; memberCard.innerHTML = `<img src="${member.imageUrl || config.memberPlaceholder}" onerror="this.onerror=null;this.src='${config.memberPlaceholder}';" alt="${member.name}" class="w-full h-auto aspect-square object-cover rounded-md mb-4 border-2 border-yellow-500"><h3 class="text-xl font-bold text-white oswald leading-none">${member.name}</h3><p class="text-sm text-yellow-500 uppercase tracking-widest mt-1 mb-2">${member.role}</p>${member.description ? `<p class="text-xs text-gray-400">${member.description}</p>` : ''}<div class="absolute top-2 right-2 flex flex-col space-y-1 opacity-0 group-hover:opacity-100 transition-opacity"><button data-id="${member.id}" title="Edit Member" class="edit-member-btn p-1.5 bg-blue-600 text-white rounded-full hover:bg-blue-700"><svg data-lucide="edit-2" width="12" height="12"></svg></button><button data-id="${member.id}" data-path="${member.imagePath || ''}" ${!member.imagePath ? 'disabled title="Cannot delete - path missing"' : 'title="Delete Member"'} class="delete-member-btn p-1.5 bg-red-600 text-white rounded-full hover:bg-red-700 disabled:bg-gray-500 disabled:cursor-not-allowed"><svg data-lucide="trash-2" width="12" height="12"></svg></button></div>`; memberCard.querySelector('.edit-member-btn').addEventListener('click', () => populateMembersFormForEdit(member.id)); memberCard.querySelector('.delete-member-btn').addEventListener('click', () => handleMemberDelete(member.id, member.imagePath)); dom.memberList.appendChild(memberCard); }); lucide.createIcons(); } }
    catch (error) { console.error('Error loading members:', error); dom.memberList.innerHTML = `<p class="text-red-500 col-span-full text-center">Could not load members: ${error.message}</p>`; }
}

export function initMembersListeners() {
    dom.membersForm.addEventListener('submit', async (e) => {
        e.preventDefault(); const submitBtn = dom.membersForm.querySelector('button[type="submit"]'); submitBtn.disabled = true; submitBtn.textContent = 'Saving...'; dom.membersStatus.textContent = 'Processing...'; dom.membersStatus.style.color = 'white'; const memberId = dom.memberIdInput.value; const name = dom.memberNameInput.value; const role = dom.memberRoleInput.value; const description = dom.memberDescriptionInput.value; const imageFile = dom.memberImageInput.files[0]; let imageUrl = null; let imagePath = null; let newlyUploadedPath = null;
        try { if (imageFile) { dom.membersStatus.textContent = `Uploading photo...`; const cleanFileName = imageFile.name.replace(/[^a-zA-Z0-9._-]/g, '_'); const filePath = `${Date.now()}_${cleanFileName}`; newlyUploadedPath = filePath; const { error: uploadError } = await _supabase.storage.from(config.MEMBERS_BUCKET).upload(filePath, imageFile); if (uploadError) throw uploadError; const { data: urlData } = _supabase.storage.from(config.MEMBERS_BUCKET).getPublicUrl(filePath); imageUrl = urlData.publicUrl; imagePath = filePath; if (!imageUrl) throw new Error("Could not get image URL after upload."); } let memberData = { name, role, description: description || null }; if (imageUrl && imagePath) { memberData.imageUrl = imageUrl; memberData.imagePath = imagePath; } if (memberId) { dom.membersStatus.textContent = 'Updating member details...'; const { error } = await _supabase.from('members').update(memberData).eq('id', memberId); if (error) throw error; dom.membersStatus.textContent = 'Member updated successfully!'; } else { dom.membersStatus.textContent = 'Adding new member...'; if (!imageUrl || !imagePath) throw new Error("Member photo is required for adding new members."); memberData.imageUrl = imageUrl; memberData.imagePath = imagePath; const { error } = await _supabase.from('members').insert([memberData]); if (error) throw error; dom.membersStatus.textContent = 'Member added successfully!'; } dom.membersStatus.style.color = 'green'; clearMembersForm(); await loadMembers(); }
        catch (error) { console.error("Member save failed:", error); dom.membersStatus.textContent = `Error: ${error.message}`; dom.membersStatus.style.color = 'red'; if (newlyUploadedPath && error.message !== "Member photo is required for adding new members.") { console.log("Attempting cleanup of failed member image upload:", newlyUploadedPath); try { await _supabase.storage.from(config.MEMBERS_BUCKET).remove([newlyUploadedPath]); } catch(cleanupErr){ console.warn("Cleanup failed:", cleanupErr); } } }
        finally { submitBtn.disabled = false; submitBtn.textContent = 'Save Member'; setTimeout(() => { if(dom.membersStatus) dom.membersStatus.textContent = ''; }, 4000); }
    });

    dom.clearMembersFormBtn.addEventListener('click', clearMembersForm);
}